package notes;

/**
 *  设计模式的目的：
 *      1、代码重复性（相同功能的代码，不用多次编写）
 *      2、可读性（编程规范性，便于其他的程序员的阅读和理解）
 *      3、可扩展性（当需要添加新的功能时，非常的方便，称为可维护性）
 *      4、可靠性（当我们添加新的功能时，对原来的功能没有影响）
 *      5、使程序呈现高内聚、低耦合的特性
 *  设计模式七大原则：
 *      1、单一职责原则
 *          1.基本介绍：对类来说，即一个类只应该负责一项原则，如类A负责两个不同的职责：职责1和职责2。当职责1需求变更而改变A时，
 *          可能造成职责2执行错误，所以需要将类A的粒度分解为A1，A2.
 *
 *          2.注意事项和细节：1）降低类的复杂度，一个类只负责一项职责  2）提高类的可读性，可维护性  3）降低变更引起的风险 4）通常
 *          情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级别违反单一职责原则，只有类中的方法数量足够少
 *          ，可以在方法级别保持单一职责原则。
 *      2、接口隔离原则
 *          1.基本介绍：客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上
 *          2.实例：类A通过接口interface1依赖类B，类C通过接口interface1依赖类D，如果接口interface1对于类A和类C来说不是最小接口，
 *          那么类B和类D必须去实现他们不需要的方法。将interface1拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系，
 *          也就是才用接口隔离原则。
 *      3、依赖倒转原则
 *          1.基本介绍：
 *              1）高层模块不应该依赖低层模块，二者都应该依赖其抽象
 *              2）抽象不应该依赖细节，细节应该依赖抽象
 *              3）依赖倒转的中心思想是面向接口编程
 *              4）依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多，以抽象为基础搭建的架构比以细节为基础
 *              的结构稳定的多，在java中，抽象指的是接口或者抽象类，细节就是具体的实现类
 *              5）使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。
 *          2.注意事项和细节：
 *              1）低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好
 *              2）变量的声明尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化
 *              3）继承时遵循里氏替换原则
 *          3.依赖传递的方式：通过接口传递、通过构造器传递、通过setter方法传递
 *      4、里氏替换原则
 *          基本介绍：
 *              1）如果对每个类型为T1的对象o1，都有类型为T2的对象o2。使得以T1定义的所有程序P在所有的对象o1都代换为o2时，程序P的
 *              行为没有发生改变，那么类型T2是类型T1的子类型，换句话说，所有引用基类的地方必须能透明地使用其子类的对象
 *              2）在使用继承时，在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法
 *              3）里氏替换原则。继承实际上让两个类的耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖来解决问题
 *      5、开闭原则：
 *          1.基本介绍：
 *              1）开闭原则是编程中最重要、最基础的设计原则
 *              2）一个软件实体如类，模块和函数应该对扩展开放（对提供方），对修改关闭（对使用方）。用抽象构建框架，用实现扩展细节。
 *              3）当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修过已有的代码来实现变化
 *              4）编程中遵循其他原则，以及使用设计模式的目的就是遵守开闭原则
 *      6、迪米特法则：
 *          1.注意事项和细节：
 *              1）迪米特法则的核心是降低类之间的耦合
 *              2）由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间的耦合，并不是要求完全没有依赖关系
 *          2.基本介绍：
 *              1）一个对象应该对其他的对象保持最少的了解
 *              2）类与类关系越密切，耦合度越大
 *              3）迪米特法则又叫最少知道原则，即一个类对自己依赖的类知道的越少越好，也就是说，对于被依赖的类不管有多么的复杂，都
 *              尽量将逻辑封装在类的内部，对外提供public方法，不对外泄漏任何信息
 *              4）只与直接朋友通信。直接朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个类之间
 *              是朋友关系，耦合的方式有很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接
 *              朋友，而出现在局部变量中的类不是直接朋友，也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。
 *      7、合成复用原则：
 *          尽量使用合成/聚合的方式，而不是使用继承。
 *  类的6大关系：
 *      依赖、泛化、实现、关联、聚合、组合
 *
 *      依赖：只要在类中用到对方，那么他们之间就存在依赖关系，
 *          1、类的成员属性    2、方法的返回类型   3、方法的接收参数类型     4、方法中使用到了   这4中情况都构成依赖关系
 *      泛化关系实际上是继承关系，它是依赖关系的特例
 *      实现关系实际上是A类实现了B类，它是依赖关系的特例
 *      关联关系实际上是类与类之间的联系，是依赖关系的特例，当一个类中，有另一个类的成员变量
 *          关联具有导航性：即双向关系或单向关系
 *          关系具有多重性： 1对1、1对多、多对多、多对1
 *          单向1对1关系、双向1对1
 *      聚合关系表示整体和部分的关系，整体和部分可以分开，聚合关系是关联关系的特例，所以它具有导航性和多重性
 *          成员变量没有new对象
 *       组合关系也是整体和部分的关系，但是整体和部分不可以分开
 *          就是在类里面new一个新的类
 *
 */
public class Thought {
}
